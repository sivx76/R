




############## CoOkIe DaTa SiMuLaTiOn #############

# Make sure to include any functions (throwBallsIntoUrns, etc) that you will use.
# The line below reads in the data and stores it in the vector variable cookieData.
# Once you run this line, the variable cookieData will be defined and should show
# up in your environment pane.
source("http://labs.biology.ucsd.edu/rifkin/courses/bieb143/spr18/cookieData.R") #added this to the environment

# Declare your functions here.

print(cookieData2018)

#count number of elements in cookieData2018 to determine # of cookies
count_cookies = length(cookieData2018)
print(count_cookies) #value is 276 cookies present

#sum cookieData2018 to determine # of chips total
count_cookie_chips = sum(cookieData2018)
print(count_cookie_chips) #value is 6067 chocolate chips present
#---

mean_cookies_IOD = count_cookie_chips / count_cookies
print(mean_cookies_IOD) #we obtain 21.98 as the mean

variance_cookies_IOD = myVariance(cookieData2018)
print(variance_cookies_IOD) #we obtain 14.31 as the variance

cookies_index_of_disperstion = variance_cookies_IOD / mean_cookies_IOD
print(cookies_index_of_disperstion) #we obtain 0.65, SUCCESS!




cookie_IODs = runif(1000,0,1) #I know I want 1000 simulations, what should be max and min? || I will assume 0 will be the min and 1 will be the max.
print(cookie_IODs)

number_of_values_less_than_threshold = 0
index = 1:length(cookie_IODs)

for (run in cookie_IODs)
{
  if(run < 0.65) #assuming 0.65 is the actual value was cookie_IODs[index] instead of run
  {number_of_values_less_than_threshold = number_of_values_less_than_threshold + 1}
}
print(number_of_values_less_than_threshold)

proportion_less_threshold = number_of_values_less_than_threshold / 1000 #assuming we have 1000 IODs in vector
p_value = proportion_less_threshold  #do not need to *100, I am assuming
print("The p-value for this distribution is:")
print(p_value)

if (p_value < 0.05)
  {print('The null hypothesis is rejected.')}

if(p_value > 0.05) #I had issues getting the else statement to work
  {print('The null hypothesis is not rejected.')} #If this occurs, cannot say there is not a random cookie distribution.

# Now write code that will simulate the cookie data randomly,
# generate many indices of dispersion,
# and compare the index of dispersion of cookieData
# to the distribution of those simulated indices.
# Your code should print a p-value to the console.


#-------------------------
#-------------------------
#-------------------------
#-------------------------

# Here is a test dataset to make sure your indexOfDispersion function works:
dataForTestOfIoD=c(5,1,5,6,7,3,45,7,3,4,7,8,5,5,7,35,7,3,2,34,6,7,7,34,4,4,6)


count_length = length(dataForTestOfIoD)
print(count_length) #27 values in this vector
count_sum = sum(dataForTestOfIoD)
print(count_sum) #267 is the sum

mean_test_of_IOD = count_sum / count_length 
print(mean_test_of_IOD) #267 / 27 = 9.88

variance_test_of_IOD = myVariance(dataForTestOfIoD)
print(variance_test_of_IOD) #We obtain 139.10 as the variance

test_index_of_dispersion = variance_test_of_IOD / mean_test_of_IOD
print(test_index_of_dispersion)
# The index of dispersion should be:  14.06655 || THIS IS WHAT WE OBTAINED! SUCCESS!

#Issue: do not use throwBallsInto Urns -- calculate IOD: variance of dataForTestOfIoD / mean
#DO NOT use the formula from last week, which generates a random distribution
#DO NOT DO THIS throwBallsIntoUrns(267, 27)
# the value I obtained with this wrong function was 15.333, 11.02, 10.25 (notice how this oscillates)

