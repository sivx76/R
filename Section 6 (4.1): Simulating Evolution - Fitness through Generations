################# Population Genetics ##############

#1) Set up a population of 1000 asexually reproducing, haploid individuals where
#they have the wild-type allele or the mutant allele. 
# 0 is the wild-type allele, 1 is the mutant allele.
#So your population will be 999 0s and one 1.

zeroes = numeric(999)
population = c(zeroes, 1)
print(population)


#2) The mutant has a selective advantage â€“ it is more fit. 
#So the fitness of the mutant is 1, while the fitness of the wild-type is 0.97. 
#Set up a vector that contains the fitnesses for each individual. 
#This vector should be linked to the population vector so the fitness at a position should also corresponding to the individual in the population.

storing_fitness_of_zeroes = rep(c(0.97), times = 999) #used to repeat a vector
print(storing_fitness_of_zeroes)

fitness = c(storing_fitness_of_zeroes , 1)
print(fitness)


#3) Use your population and your fitness vectors to generate the next generation. 
#Use the sample() function.

new_generation = sample(population, 1000, replace = TRUE, prob = fitness) #We set to TRUE so some may not be picked. If we allow selection with replacement, then all will be given the chance to reproduce regardless of fitness.
print(new_generation)


counter = 0
for (run in new_generation)
{
  if (run == 1)
  {counter = counter +1}
}

print(counter) #I received 1 occurence | 2 occurence

#4) Repeat step (3) until one of the alleles goes to fixation. 
#Be sure to record the frequency of the mutant allele each generation 
#so that you can plot the evolutionary trajectory at the end of your simulation. 
#Note that this means you will have to figure out how to store this information from each generation.

q_allele = counter / 1000
print(q_allele) #A value equals 0.002

q = q_allele #ERROR was not pre-defining this before
while ((q < 1) & (q > 0)) #Changed from | to &
{
  storage_q_allele_values = c(q_allele)
  
  
  new_gen = sample(population, 1000, replace = TRUE, prob = fitness) #population would be the new_gen, must update the fitness
  counter = 0 #set population to new_gen, initialize new_gen with population OR update population with new vector
  
  for (run in new_gen)
  {
    if (run == 1)
    {counter = counter +1}
  }
  q = counter / 1000 #Worked when took these 2 statements outside of the for loop
  storage_q_allele_values = c(storage_q_allele_values, q)
  
}

print(storage_q_allele_values)

plot(storage_q_allele_values, type = 'l')
